type: edu
custom_name: stage2
files:
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import tictactoe.Main;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;

    enum FieldState {
        X, O, FREE;

        static FieldState get(char symbol) {
            switch (symbol) {
                case 'X': return X;
                case 'O': return O;
                case ' ':
                case '_':
                    return FREE;
                default: return null;
            }
        }
    }

    class TicTacToeField {

        final FieldState[][] field;

        TicTacToeField(FieldState[][] field) {
            this.field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    this.field[row][col] = field[row][col];
                }
            }
        }

        TicTacToeField(String str) {
            field = new FieldState[3][3];
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    field[row][col] =
                        FieldState.get(str.charAt(((2 - row) * 3 + col)));
                }
            }
        }

        boolean equalTo(TicTacToeField other) {
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean hasNextAs(TicTacToeField other) {
            boolean improved = false;
            for (int i = 0; i < 3; i++) {
                for (int j = 0; j < 3; j++) {
                    if (field[i][j] != other.field[i][j]) {
                        if (field[i][j] == FieldState.FREE && !improved) {
                            improved = true;
                        }
                        else {
                            return false;
                        }
                    }
                }
            }
            return improved;
        }

        boolean isCloseTo(TicTacToeField other) {
            return equalTo(other)
                || hasNextAs(other)
                || other.hasNextAs(this);
        }

        static TicTacToeField parse(String fieldStr) {

            try {
                List<String> lines = fieldStr
                    .lines()
                    .map(String::strip)
                    .filter(e ->
                        e.startsWith("|")
                            && e.endsWith("|"))
                    .collect(Collectors.toList());

                for (String line : lines) {
                    if (line.length() != 9) {
                        throw new WrongAnswer("Line of Tic-Tac-Toe " +
                            "field should be 9 characters long\n" +
                            "found " + line.length() + " characters in \"" + line + "\"");
                    }
                    for (char c : line.toCharArray()) {
                        if (c != 'X'
                            && c != 'O'
                            && c != '|'
                            && c != ' '
                            && c != '_') {
                            return null;
                        }
                    }
                }

                FieldState[][] field = new FieldState[3][3];

                int y = 2;
                for (String line : lines) {
                    char[] cols = new char[] {
                        line.charAt(2),
                        line.charAt(4),
                        line.charAt(6)
                    };

                    int x = 0;
                    for (char c : cols) {
                        FieldState state = FieldState.get(c);
                        if (state == null) {
                            return null;
                        }
                        field[y][x] = state;
                        x++;
                    }
                    y--;
                }

                return new TicTacToeField(field);
            } catch (Exception ex) {
                return null;
            }
        }


        static List<TicTacToeField> parseAll(String output) {
            List<TicTacToeField> fields = new ArrayList<>();

            List<String> lines = output
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            String candidateField = "";
            boolean insideField = false;
            for (String line : lines) {
                if (line.contains("----") && !insideField) {
                    insideField = true;
                    candidateField = "";
                } else if (line.contains("----") && insideField) {
                    TicTacToeField field = TicTacToeField.parse(candidateField);
                    if (field != null) {
                        fields.add(field);
                    }
                    insideField = false;
                }

                if (insideField && line.startsWith("|")) {
                    candidateField += line + "\n";
                }
            }
            return fields;
        }
    }


    class Clue {
        int x, y;
        Clue(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public class TicTacToeTest extends StageTest<Clue> {
        public TicTacToeTest() {
            super(Main.class);
        }

        static String[] inputs = new String[] {
            "1 1", "1 2", "1 3",
            "2 1", "2 2", "2 3",
            "3 1", "3 2", "3 3"
        };

        String iterateCells(String initial) {
            int index = -1;
            for (int i = 0; i < inputs.length; i++) {
                if (initial.equals(inputs[i])) {
                    index = i;
                    break;
                }
            }
            if (index == -1) {
                return "";
            }
            String fullInput = "";
            for (int i = index; i < index + 9; i++) {
                fullInput += inputs[i % inputs.length] + "\n";
            }
            return fullInput;
        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            int i = 0;
            for (String input : inputs) {
                String fullMoveInput = iterateCells(input);

                String[] strNums = input.split(" ");
                int x = Integer.parseInt(strNums[0]);
                int y = Integer.parseInt(strNums[1]);

                if (i % 2 == 1) {
                    // mix with incorrect data
                    fullMoveInput = "4 " + i + "\n" + fullMoveInput;
                }

                String fullGameInput = "";
                for (int j = 0; j < 9; j++) {
                    fullGameInput += fullMoveInput;
                }

                tests.add(new TestCase<Clue>()
                    .setInput(fullGameInput)
                    .setAttach(new Clue(x, y)));

                i++;
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            List<TicTacToeField> fields = TicTacToeField.parseAll(reply);

            if (fields.size() == 0) {
                return new CheckResult(false, "No fields found");
            }

            for (int i = 1; i < fields.size(); i++) {
                TicTacToeField curr = fields.get(i - 1);
                TicTacToeField next = fields.get(i);

                if (!(curr.equalTo(next) || curr.hasNextAs(next))) {
                    return new CheckResult(false,
                        "For two fields following each " +
                            "other one is not a continuation " +
                            "of the other (they differ more than in two places).");
                }
            }

            if (!reply.contains("Making move level \"easy\"")) {
                return new CheckResult(false,
                    "No \"Making move level \"easy\"\" line in output");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;

    public class Main {
        public static final String GAME_NOT_FINISHED = "Game not finished";
        public static final String DRAW = "Draw";
        public static final String X_WINS = "X wins";
        public static final String O_WINS = "O wins";
        public static final String IMPOSSIBLE = "Impossible";
        public static final int SIZE = 3;
        public static final String ENTER_COORDINATES = "Enter the coordinates: ";
        public static final String COORDINATES_1_3 = "Coordinates should be from 1 to 3!";
        public static final String CELL_OCCUPIED = "This cell is occupied! Choose another one!";
        public static final String ENTER_NUMBERS = "You should enter numbers!";
        public static final String LEFT_EDGE = "| ";
        public static final String RIGHT_EDGE = "|\n";
        public static final String BORDER = "---------";
        public static final String X_ = "X ";
        public static final String O_ = "O ";
        public static final String EMPTY = "_ ";
        static int emptyPlaces = 9;
        static Scanner scanner = new Scanner(System.in);
        static Integer[][] board = {{-1, -1, -1},{-1, -1, -1},{-1, -1, -1}};

        public static void main(String[] args) {
            System.out.println("Enter cells:");
            String input = scanner.nextLine();
            board = input(input);
            ticTacToe();
        }

        private static Integer[][] input(String input) {
            Integer[][] matrix = new Integer[SIZE][SIZE];
            int index = 0;
            for (char c : input.toCharArray()) {
                if ('X' == c) {
                    matrix[index / SIZE][index % SIZE] = 1;
                }else if ('O' == c) {
                    matrix[index / SIZE][index % SIZE] = 0;
                } else {
                    matrix[index / SIZE][index % SIZE] = -1;
                    emptyPlaces++;
                }
                index++;
            }
            return matrix;
        }

        private static void ticTacToe() {
            String state;
            printBoard();
            int counter = 1;
            do {
                userInput(counter++ % 2);
                state = processState();
            }while (state.equals(GAME_NOT_FINISHED));
            System.out.println(state);
        }

        private static String processState() {
            String state;
            String rowWin = processRows();
            String columnWin = processColumns();
            String diagonalWin = processDiagonal();
            if (rowWin != null && columnWin != null && !rowWin.equals(columnWin)) {
                state = IMPOSSIBLE;
            } else if (rowWin != null) {
                state = rowWin;
            } else if (columnWin != null) {
                state = columnWin;
            } else if (diagonalWin != null) {
                state = diagonalWin;
            } else if (emptyPlaces > 0) {
                state = GAME_NOT_FINISHED;
            } else {
                state = DRAW;
            }
            return state;
        }

        private static void userInput(int value) {
            boolean marked = false;
            do {
                System.out.print(ENTER_COORDINATES);
                try {
                    String i = scanner.next();
                    int x = Integer.parseInt(i);
                    String j = scanner.next();
                    int y = Integer.parseInt(j);
                    if (x > 3 || x < 1 || y > 3 || y < 1){
                        System.out.println(COORDINATES_1_3);
                        continue;
                    }
                    marked = markPosition(x, y, value);
                    if (!marked){
                        System.out.println(CELL_OCCUPIED);
                    }
                } catch (Exception e) {
                    System.out.println(ENTER_NUMBERS);
                }

            }while (!marked);
            printBoard();
        }

        private static String processDiagonal() {
            String state = null;
            int sum = 0;
            for (int i = 0; i < SIZE; i++) {
                if (board[i][i] == -1) {
                    sum = -1;
                    break;
                }
                sum += board[i][i];
            }
            if (sum == 0) {
                state = O_WINS;
            }else if (sum == SIZE) {
                state = X_WINS;
            } else {
                sum = 0;
                for (int i = 0,j = SIZE - 1; i < SIZE && j >= 0;) {
                    Integer value = board[i++][j--];
                    if (value == -1) {
                        return null;
                    }
                    sum += value;
                }
                if (sum == 0) {
                    state = O_WINS;
                }else if (sum == SIZE) {
                    state = X_WINS;
                }
            }
            return state;
        }

        private static String processColumns() {
            String state = null;
            boolean xWon = false;
            boolean oWon = false;
            for (int j = 0; j < SIZE; j++) {
                int sum = 0;
                for (int i = 0; i < SIZE; i++) {
                    if (board[i][j] == -1) {
                        sum = -1;
                        break;
                    }
                    sum += board[i][j];
                }
                if (sum == SIZE) {
                    xWon = true;
                    state = X_WINS;
                } else if (sum == 0) {
                    oWon = true;
                    state = O_WINS;
                }
            }
            if (xWon && oWon) {
                return IMPOSSIBLE;
            }
            return state;
        }

        private static String processRows() {
            String state = null;
            boolean xWon = false;
            boolean oWon = false;
            for (int i = 0; i < SIZE; i++) {
                int sum = 0;
                for (int j = 0; j < SIZE; j++) {
                    if (board[i][j] == -1) {
                        sum = -1;
                        break;
                    }
                    sum += board[i][j];
                }
                if (sum == SIZE) {
                    state = X_WINS;
                    xWon = true;
                } else if (sum == 0) {
                    state = O_WINS;
                    oWon = true;
                }
            }
            if (xWon && oWon) {
                return IMPOSSIBLE;
            }
            return state;
        }

        private static boolean markPosition(int x, int y, int value) {
            if(board[SIZE - y][x - 1] == -1) {
                board[SIZE - y][x - 1] = value;
                emptyPlaces--;
                return true;
            }
            return false;
        }

        private static void printBoard() {
            System.out.println(BORDER);
            for (int i = 0; i < SIZE; i++) {
                System.out.print(LEFT_EDGE);
                for (int j = 0; j < SIZE; j++) {
                    int value = board[i][j];
                    if(value == 1){
                        System.out.print(X_);
                    } else if (value == 0) {
                        System.out.print(O_);
                    } else {
                        System.out.print(EMPTY);
                    }
                }
                System.out.print(RIGHT_EDGE);
            }
            System.out.println(BORDER);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/81/stages/448/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/81/stages/448/implement">JetBrains
    Academy</a>
  time: Sun, 05 Jul 2020 11:59:30 UTC
record: 2
